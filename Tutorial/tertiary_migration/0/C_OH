/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      C_OH;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "include/transportProperties"

dimensions      [0 -3 0 0 1 0 0];

internalField   uniform $C_OHinf;

boundaryField
{

    wall_anode       
    {


    type            codedMixed;
    
    refValue        $internalField;
    refGradient     uniform 0;
    valueFraction   uniform 1;

    name    anodeC_OH;   // name of generated BC

    code
    #{
        const fvPatch& p = this->patch();                                                                          // Actual boundary/patch
    	label patchID = p.patch().boundaryMesh().findPatchID("wall_anode");                                        // Desired patch ID
	const fvMesh& mesh = patch().boundaryMesh().mesh();
    	const dictionary& speciesProperties = db().lookupObject<IOdictionary>("speciesProperties");

	const dimensionedScalar Deff_(speciesProperties.subDict("OH").lookup("D"));
	const dimensionedScalar u_(speciesProperties.subDict("OH").lookup("u"));
	const dimensionedScalar z_(speciesProperties.subDict("OH").lookup("z"));

	const dictionary& kineticProperties = db().lookupObject<IOdictionary>("transportProperties");
	const dictionary& Results = db().lookupObject<IOdictionary>("Results");

	const scalar nu_e = readScalar(kineticProperties.lookup("nu_e"));
	const scalar nu_k = readScalar(kineticProperties.lookup("nu_k"));
        
        const scalar j0_Ni = readScalar(kineticProperties.lookup("j0_Ni"));
        const scalar bc_Ni = readScalar(kineticProperties.lookup("bc_Ni"));
	const scalar ba_Ni = readScalar(kineticProperties.lookup("ba_Ni"));
	const scalar E0 = readScalar(kineticProperties.lookup("E0"));
        const scalar C_Minf = readScalar(kineticProperties.lookup("C_OHinf"));
	
	const volScalarField& fi_ = this->db().objectRegistry::template lookupObject<volScalarField>("fi");
	scalarField fi_boundary = fi_.boundaryField()[patchID];                                    // Desired field on desired patch
	scalarField grad_fi = -fi_.boundaryField()[patchID].snGrad();

	const volScalarField& kf_ = this->db().objectRegistry::template lookupObject<volScalarField>("keff");   // Desired field 1
	scalarField kf_boundary = kf_.boundaryField()[patchID];
	const volScalarField& electroneut_ = this->db().objectRegistry::template lookupObject<volScalarField>("electroneut");   // Desired field 1
	scalarField electroneut_boundary = electroneut_.boundaryField()[patchID];

	//const volScalarField& Con_M = this->db().objectRegistry::template lookupObject<volScalarField>("C_OH");
	//scalarField C_M_boundary = Con_M.boundaryField()[patchID];
	//Info<< "Min/max grad_fi:" << min(grad_fi) << ' ' << max(grad_fi) << endl;

        scalarField delta = 1.0/mesh.deltaCoeffs().boundaryField()[patchID]; 
	const scalar F = 96485.0; 
 	
	scalar Vcell = readScalar(Results.lookup("Vcell"));

	scalarField jota_k = j0_Ni*exp((Vcell-fi_boundary-E0)/ba_Ni);                                       
        scalarField jota_nok = -j0_Ni*exp((Vcell-fi_boundary-E0)/bc_Ni);
	scalarField k0 = Deff_.value()/delta;     

	scalarField ak = -nu_k/nu_e*jota_k/F/k0/C_Minf-F*z_.value()*u_.value()/k0*grad_fi;
	scalarField bk = nu_k/nu_e*jota_nok/F/k0;
	    
        this->refValue() =  bk/ak;
        this->refGrad() = 0;
        this->valueFraction() = ak/(ak+1);
    #};
 
    /*codeInclude
    #{
        #include "fvCFD.H"
        #include "fvcSnGrad.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
    #};*/

    }

    wall_cathode      
    {

    type            codedMixed;
    
    refValue        $internalField;
    refGradient     uniform 0;
    valueFraction   uniform 1;

    name    cathodeC_OH;   // name of generated BC

    code
    #{
        const fvPatch& p = this->patch();                                                                          
    	label patchID = p.patch().boundaryMesh().findPatchID("wall_cathode");                                      
        const fvMesh& mesh = patch().boundaryMesh().mesh();

    	const dictionary& speciesProperties = db().lookupObject<IOdictionary>("speciesProperties");
	const dimensionedScalar Deff_(speciesProperties.subDict("OH").lookup("D"));
	const dimensionedScalar u_(speciesProperties.subDict("OH").lookup("u"));
	const dimensionedScalar z_(speciesProperties.subDict("OH").lookup("z"));
   
        const volScalarField& fi_ = this->db().objectRegistry::template lookupObject<volScalarField>("fi"); 
        scalarField fi_boundary = fi_.boundaryField()[patchID];  
	scalarField grad_fi = -fi_.boundaryField()[patchID].snGrad(); 

        //const volScalarField& Con_M = this->db().objectRegistry::template lookupObject<volScalarField>("C_OH");	
	//scalarField C_M_boundary = Con_M.boundaryField()[patchID];

	const volScalarField& kf_ = this->db().objectRegistry::template lookupObject<volScalarField>("keff");   // Desired field 1
	scalarField kf_boundary = kf_.boundaryField()[patchID];
	const volScalarField& electroneut_ = this->db().objectRegistry::template lookupObject<volScalarField>("electroneut");   // Desired field 1
	scalarField electroneut_boundary = electroneut_.boundaryField()[patchID];
                             
        scalarField delta = 1.0/mesh.deltaCoeffs().boundaryField()[patchID]; 

        const dictionary& kineticProperties = db().lookupObject<IOdictionary>("transportProperties");
	const scalar nu_e = readScalar(kineticProperties.lookup("nu_e_c"));
	const scalar nu_k = readScalar(kineticProperties.lookup("nu_k_c"));
        const scalar C_Minf = readScalar(kineticProperties.lookup("C_OHinf"));
	
        
        const scalar j0_H2 = readScalar(kineticProperties.lookup("j0_H2"));
        const scalar bc_H2 = readScalar(kineticProperties.lookup("bc_H2"));
	const scalar E0_H2 = readScalar(kineticProperties.lookup("E0_H2"));
        
        const scalar F = 96485.0;

        scalarField jota_k = -j0_H2*exp((-fi_boundary-E0_H2)/bc_H2);                                      
        //scalarField jota_nok = 0*j0_H2*exp(-fi_boundary/ba_H2);
	scalarField k0 = Deff_.value()/delta;  
        
	scalarField ak = -F*z_.value()*u_.value()/k0*grad_fi;//-nu_k/nu_e*jota_nok/C_Minf/F/k0-F*z_.value()*u_.value()/k0*grad_fi;//
	scalarField bk = nu_k/nu_e*(jota_k)/F/k0;//jota_nok+

        this->refValue() = bk/ak;
        this->refGrad() = 0;
        this->valueFraction() = ak/(ak+1);  
    #};
 
    /*codeInclude
    #{
        #include "fvCFD.H"
        #include "fvcSnGrad.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
    #};*/
    }

    inlet
    {
        type            fixedValue;
	value		uniform $C_OHinf;
    }

    outlet
    {
        type            zeroGradient;
    }

    wall_isolation
    {
        type            zeroGradient;
    }

    frontAndBack
    {
        type            empty;   
    }    
 
}

// ************************************************************************* //
